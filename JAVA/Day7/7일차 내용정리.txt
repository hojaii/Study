class에 선언되는 변경자는 class의 종류(타입)을 의미함
(abstact, final extends 부모클래스 명을 생략하면 자동으로 java.lang.Object를 상속받음)

클래스의 구성요소 : data + 기능(메서드) + 생성자(객체를 생성할때 사용되는 특별한 메서드)

클래스는 data(속성)과 data를 처리하는기능(메서드)으로 구성됨


클래스의 멤버필드 선언문법

접근제어자	[변경자]		[타입]		field명(=초기값);

public		final		primitive data type
protect		static		reference data type
(default)
private



클래스의 기능 메서드 선언문법

접근제어자	[변경자]		리턴타입		메서드이름([타입변수,타입변수, ...])

public		final		primitive data type
protect		abstract		reference data type
(default)		static		void
private		sychronized



객체 지향 : 소프트 웨어 개발 부품에 해당하는 객체를 만들고 객체들을 조립해서 완성된 프로그램을 만드는 기법
객체 : 물리적, 추상적 존재하는 모든것 (식별가능, 속성과동작으로 구성됨)
객체모델링: 현실세계의 객체를 소프트웨어 객체로 설계 (필드와 메서드를 정의하는 과정)

객체들간의 상호작용 > 메서드(기능) 호출
객체들간의 관계 > 집합관계 (완성품에서 부품역할), 사용관계(집합, 상속관게 없이 다른객체의 메서드를 호출
상속관계(부모객체를 기반으로 자식객체를 생성함)

객체지향의 3대특성

1. 캡슐화 
객체의 속성(필드)와 기능(메서드)을 하나로 묶고, 실제 구현내용을 감추는것 Access Modifier(접근제어자)구현

2. 상속
부모 객체의 메서드와 필드를 자식객체가 정의 및 초기화 없이 사용함(소유)

3. 다형성
부모는 동일한데 상속받은 자식클래스는 필드와 메서드를 새로 정의함

클래스는 객체의 속성과 기능을 정의하는 설계도, 틀
객체는 메모리에 클래스로부터 생성되는 실체(인스턴스, 인스턴스화)
클래스로부터 객체를 만드는과정 인스턴스화(동적의미)
클래스에 정의된 속성과 기능만 생성된 객체로 이용가능함

클래스 타입 객체 = new클래스타입(); //객체생성
	객체.속성=값; // .는 소유의 연사자임
	객체.메서드();

클래스 구성 : 클래스 선언 + 멤버필드 + 생성자메서드 + 멤버메서드
(멤버필드는 객체의 현재상태를 저장함)

클래스의 멤버필드는 선언만 하는경우 자동으로 IVM객체 생성시에 메모리에 기본값으로 초기화해줌
(default 초기값)
final이 선언된 변수는 반드시 사용전에 초기화를 해주어야함
final이 선언된 변수는 변경이 불가능함(상수)
final변수는 변수명을 일반적으로는 대문자로 선언함
(어플리케이션이 종료될때까지 절대 변경되면 안되는 데이터는 보통 상수로 설계함)
non-static 변수는 객체마다 따로 메모리가 생성되고 초기화되고 객체를 통해서만 사용됨
static이 선언된 변수는 메모리에 유일하게 단 하나만 생성되고 객체 생성없이 클래스 이름으로 사용가능함
static이 선언된 변수는 클래스 변수임
static이 선언된 변수는 동일한 클래스로부터 생성된 모든 객체들이 공유하는 전역변수로 설계해야함

생성자 메서드 : 객체를 생성할때 객체의 멤버들을 초기화를 수행하는 메서드

메서드는 리턴값이 없으면 void로 선언하지만 생성자 메서드는 메모리에서 초기화를 담당하므로 리턴타입이없음



CallByValue : 메서드 호출시에 파라미터 타입이 primitive data type이면 JVM에서는 호출할때 값을 복사해서 전달
CallByReference : 메서드 호출시에 파라미터 타입이 reference data type(클래스, 배열, 인터페이스)이면 
JVM메서드 호출시 메모리 주소를 전달함


메서드 overload(중복정의)
동일한 기능을 수행하지만, 파라미터 개수, 순서, 타입이 다른경우 메서드 이름을 동일한 이름으로 재사용함

객체지향 다형성 특성을 구현함
ex) 계산기 프로그램에서 덧셈기능 : 정수+정수, 정수+실수, 정수+문자열, 문자열+문자열, 실수+실수, .....
메서드이름은 동일하게 선언하고 파라미터의 타입, 순서, 개수를 다르게 선언해야함

