변수(field)의 선언위치에 따른 분류

1. 멤버필드의 소유자 클래스이며 
인스턴스필드 (반드시 객체 생성후 사용)
final선언필드 (상수, 반드시 초기화, 변경불가)
static선언필드 (전역변수, 공유변수, 클래스변수, 객체 생성없이 클래스 이름으로 사용가능)

final을 제외하고 선언만 한 경우 객체가 생성될때 default 초기값으로 메모리에 초기화됨
멤버필드는 access modifier와 modifier을 선언가능함

2. 로컬변수는 소유자 메서드이며, 메서드선언의 파라미터, 메서드 내부에 선언된 변수 사용전에 반드시 값이 초기화되어야함
로컬변수는 access modifier선언 불가능 modifier는 final을 제외하고 선언불가능함

메서드의 로컬변수와 멤버변수의 이름이 동일한 경우 구별하려면 멤버변수는 this.멤버변수 로 사용함
(this는 클래스 자신을 의미하는 reference변수)


package와 import

Package : 관련된 클래스, 인터페이스, 예외클래스, 그룹핑한 단위로 클래스 이름충돌을 예방가능함
ex) java.io, java.lang, java.net ....

Access modifier
class에 선언 : public, (default)
메서드에 선언 : public, protected, (default), private
멤버필드에 선언 : public, protected, (default), private

protected는 외부 패키지에서 상속받은 클래스에 의해서만 access가능
(default)는 외부패키지에서는 무조건 access허용하지않음 (상속관계가 있어도 허용하지않음)
(default)는 동일 패키지 내에서만 access가능
private는 선언된 클래스 내에서만 access가능, 동일패키지내에 상속받은 자식클래스에서도 access불가능


생성자 overload와 this()
생성자 메서드는 메서드중복정의가 가능해서 생성자 메서드에서 중복정의된 다른 생성자를 호출할때
생성자 메서드내에 한번만 호출이 가능하고, 첫번째 문장으로 호출해야됨
생성자 메서드에서 중복정의된 다른 생성자를 호출할경우, 생성자 메서드 이름대신 this();로 호출함

static method
static멤버필드를 변경하는 메서드에 static을 선언하며 static 선언된 메서드는 메모리에 객체마다 생성되지않고 한번만 생성되며
static 선언된 메서드는 모든 객체들에 의해서 공유됨 static 선언된 메서드 내부에는 외부의 non-static필드, 메서드 사용불가

String클래스는 불변 문자열을 위해서 설계된 클래스로 어플리케이션에서 계속 변경되는 문자열은
String보다는 StringBuffer클래스를 사용함

가변 파라미터는 메서드 선언에서 마지막 파라미터로 선언함

클래스 내부에 생성자가 정의되어있지 않으면 컴파일시 JDK바이트 코드로 변환할떄 default 생성자를 만들어줌

부모 클래스 = 상위클래스 = Parent클래스 = Super클래스
자식 클래스 = 하위클래스 = Child클래스 = Sub클래스  = 파생클래스 = driven클래스

부모 클래스의 멤버(필드, 메서드)중 private필드,  메서드, 생성자 메서드 상속 불가능

자식클래스에서 부모로부터 상속받은 멤버들을 사용하기 reference변수명 : Super

부모 클래스에서 상속관계에 있는 자식클래스인 메서드를 호출할면 객체생성해서 메서드를 호출해야됨

자식클래스에서 사옥바은 부모클래스의 메서드를 호출하려면 객체 생성없이 메서드 호출이 가능하고,
동일한 이름의 메서드가 자식클래스에 정의되어있는경우, Super를 통해 메서드를 호출해야됨


Override(재정의) 메서드
부모 클래스로부터 상속받은 메서드를 자식클래스에서 새로정의한것

AccessModifier는 동일하거나 유효범위가 더 커야함(좁으면 컴파일에러발생)
리턴 타입, 메서드이름, 메서드의 매개변수의 개수, 순서, 타입이 모두 동일함

override 메서드는 자식클래스에서 0개,1개만 정의가 가능함
매개변수의 순서, 개수, 타입이 다른 overload메서드는 0개이상의 여러개정의 가능


Final멤버 변수 : 상속,변경불가
public final 리턴타입 메서드(매개변수...){} : 자식클래스에서 override불가능
public final class 클래스이름 {} : 상속 불가클래스 (종단클래스)



컴파일 에러는 문법적 규칙이 맞지않아서 발생함
Runtime 에러는 실행시에 발생됨
XXXException은 가벼운오류로 프로그램을 변경하거나 예외처리를 수행하면 프로그램이 수행가능
XXXXError는 물리적인 원인 오류로 예외처리로 프로그램을 정상실행이 불가능함


IO처리 메서드 사용, nework통신메서드,db연동,data읽고쓰는 메서드를 사용할때
예외처리는 try {
		예외가 발생할수있는문장;
		} catch (예외클래스1 객체) {
			예외처리문;
		} catch (예외클래스2 객체) {
			예외처리문;
		} finally { 리소스정리문;
			}

 